# -*- coding: utf-8 -*-
"""code_search_tool.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-gvRCiRWXcZUlwEPOVd-G_yNZ5q_q3Kv
"""

# tools/code_generator_tool.py
import os
from langchain_openai import AzureChatOpenAI
from langchain_core.messages import SystemMessage, HumanMessage
from dotenv import load_dotenv

load_dotenv()


# ==============================
# Setup Azure Chat LLM
# ==============================
llm_chat_client = AzureChatOpenAI(
    azure_deployment=os.getenv("OPENAI_DEPLOYMENT_NAME_8K"),
    api_version=os.getenv("OPENAI_API_VERSION"),
    api_key=os.getenv("OPENAI_API_KEY"),
    azure_endpoint=os.getenv("AZURE_ENDPOINT"),
    temperature=0,
    max_tokens=8000,
    # top_p=0.1,  # optional
)


# ==============================
# Code Generator Tool
# ==============================
def code_generator_tool(context: str) -> str:
    prompt = f"""You are an expert developer specializing in migrating legacy COBOL code to modern Python.
    Your task is to analyze the provided COBOL source code and generate a **functionally equivalent** Python program.
    --- COBOL Code to Migrate ---
    {context}

    **Strictly follow below Migration Plan:**
    1.  **Analyze Structure:** Identify key COBOL program sections such as `DATA DIVISION`, `PROCEDURE DIVISION`, and logical blocks like `MAIN-LOGIC` and `PERFORM` statements. Translate these into a clean, object-oriented Python structure using classes, methods, and functions.
    2.  **Translate Data:** Convert COBOL data variables (`PIC`, `V`, `S`) to appropriate Python data types. If the COBOL code explicitly mentions reading from a data file (e.g., `SELECT EMPFILE ASSIGN TO 'EMP.DAT'`), you **MUST** implement Python code to **read and parse that external data file**. Create a placeholder `EMP.DAT` file (e.g., in CSV) in your generated code's example usage, or provide instructions on how to create one. Do not hardcode employee data within the `process_employees` loop. The Python solution must dynamically retrieve employee hours and rates.
    3.  **Convert Business Logic:** Translate all calculations (`COMPUTE`), conditional logic (`IF/ELSE`), and loops (`PERFORM...UNTIL`) into their Python equivalents. Ensure the logic remains identical.
    4.  **Preserve I/O:** All COBOL `DISPLAY` statements must be converted to Python `print` statements, preserving the exact output text.
    5.  **Main Entry Point:** Include a `if __name__ == '__main__':` block that demonstrates the correct execution flow of the migrated program.

    Return only the complete and runnable Python code. Do not include any explanations, code block fences (```python), or additional text.
    """

    messages = [
        SystemMessage(content="You are a helpful AI assistant that generates clean Python migration code."),
        HumanMessage(content=prompt)
    ]


    print("Sending prompt to LLM...")
    response = llm_chat_client.invoke(messages)
    if response:
        print(response)
    else:
        print("No code to migrate!")
    return response.content.strip()