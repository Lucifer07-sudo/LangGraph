# -*- coding: utf-8 -*-
"""test_generator_tool.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-gvRCiRWXcZUlwEPOVd-G_yNZ5q_q3Kv
"""

# Updated test_generator_tool function
from langchain_openai import AzureChatOpenAI
from langchain_core.messages import HumanMessage, SystemMessage
from dotenv import load_dotenv
import os

load_dotenv()

llm_chat_client = AzureChatOpenAI(azure_deployment=os.getenv("OPENAI_DEPLOYMENT_NAME_8K"),
                      api_version=os.getenv("OPENAI_API_VERSION"),
                      api_key=os.getenv("OPENAI_API_KEY"),
                      azure_endpoint=os.getenv("AZURE_ENDPOINT"),
                      temperature= 0,
                      max_tokens=2048,
                      #top_p=0.1
                 )

def test_generator_tool(old_code: str, new_code: str) -> str:

    prompt = f"""
    You are a senior software test engineer.
    Your task: Create a valid Python `unittest` suite to verify the correctness of the NEW migrated code. The NEW code is located in a file named `module.py`.

    **Instructions for Test Generation:**
    1.  **Examine the NEW CODE:** Read the provided `new_code` to identify the main class and its methods.
    2.  **Generate Imports:** Based on your examination, create the necessary import statements. For example, if you identify a class named `Payroll`, the import should be `from module import Payroll`. Include imports for any standalone functions as well.
    3.  **Class and Method Usage:** Your test cases should use the exact class and method names found in the `new_code`.
    4.  **Output Capture:** If a method prints to standard output instead of returning a value, use Python's `io.StringIO` and `sys.stdout` to capture the printed output for assertions.
    5.  **Test Logic:** Derive expected values for assertions by applying the logic found in the `new_code`. For example, if the tax rate is 20%, use `(pay) * 0.8` to calculate net pay.
    6.  **Input Validation:** Test the code's behavior as-is. Do not assume or assert that it will raise `ValueError` unless the code explicitly contains that logic.

    **NEW CODE (migrated Python):**
    {new_code}

    **OLD CODE (legacy system) for context:**
    {old_code}

    Return ONLY a single, valid Python `unittest` file. Do not include explanations, comments, or markdown.
    """

    messages = [
        SystemMessage(content="You are an expert test engineer who strictly follows instructions to generate valid and runnable test code."),
        HumanMessage(content=prompt)
    ]

    response = llm_chat_client.invoke(messages)
    test = response.content.strip()
    return test